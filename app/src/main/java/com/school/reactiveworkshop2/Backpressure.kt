package com.school.reactiveworkshop2

import android.util.Log
import io.reactivex.rxjava3.core.BackpressureOverflowStrategy
import io.reactivex.rxjava3.core.Flowable
import io.reactivex.rxjava3.core.Observable
import io.reactivex.rxjava3.schedulers.Schedulers
import java.util.concurrent.TimeUnit

private val observable = Observable.range(1, 20)

// –ü—Ä–æ–±–ª–µ–º–∞ backpressure –æ—Ç—Å—É—Ç–≤—É–µ—Ç
fun runNoBackpressure() {
    observable.subscribe(
        {
            Log.d("üçï‚è≠", "onNext: $it")
        },
        {
            Log.d("üçï‚ùå", "onError: $it")
        },
        {
            Log.d("üçïüèÅ", "onComplete")
        }
    )
}

//–ü—Ä–æ–±–ª–µ–º–∞ backpressure –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ –∏–∑-–∑–∞ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏, –æ–Ω–∞ –Ω–µ–æ—á–µ–≤–∏–¥–Ω–∞
fun runWithBackpressureSingleThread() {
    observable.subscribeOn(Schedulers.computation())
        .doOnNext { Log.d("üçï‚è≠", "Next Posted: $it") }
        .subscribe(
            {
                Log.d("üçï‚è≠", "onNext: $it")
                try {
                    TimeUnit.MILLISECONDS.sleep(300)
                } catch (e: InterruptedException) {
                    e.printStackTrace()
                }
            },
            {
                Log.d("üçï‚ùå", "onError: $it")
            },
            {
                Log.d("üçïüèÅ", "onComplete")
            }
        )
}

//–ü—Ä–æ–±–ª–µ–º–∞ backpressure –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–∫—Ä—ã—Ç –∑–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –±—É—Ñ–µ—Ä–æ–º observeOn
fun runWithBackpressureMultithread() {
    observable.subscribeOn(Schedulers.computation())
        .doOnNext { Log.d("üçï‚è≠", "Next Posted: $it") }
        .observeOn(Schedulers.io())
        .subscribe(
            {
                Log.d("üçï‚è≠", "onNext: $it")
                try {
                    TimeUnit.MILLISECONDS.sleep(300)
                } catch (e: InterruptedException) {
                    e.printStackTrace()
                }
            },
            {
                Log.d("üçï‚ùå", "onError: $it")
            },
            {
                Log.d("üçïüèÅ", "onComplete")
            }
        )
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞
fun runWithBackpressureMultithreadLowBuffer() {
    observable.subscribeOn(Schedulers.computation())
        .doOnNext { Log.d("üçï‚è≠", "Next Posted: $it") }
        .observeOn(Schedulers.io(), false, 16)
        .subscribe(
            {
                Log.d("üçï‚è≠", "onNext: $it")
                try {
                    TimeUnit.MILLISECONDS.sleep(300)
                } catch (e: InterruptedException) {
                    e.printStackTrace()
                }
            },
            {
                Log.d("üçï‚ùå", "onError: $it")
            },
            {
                Log.d("üçïüèÅ", "onComplete")
            }
        )
}

// –ò–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è backpressure
fun runBackpressureSafeRange() {
    Flowable.range(1, 30)
        .subscribeOn(Schedulers.computation())
        .doOnNext { Log.d("üçï‚è≠", "Next Posted: $it") }
        .observeOn(Schedulers.io(), false, 3)
        .subscribe(
            {
                Log.d("üçï‚è≠", "onNext: $it")
                try {
                    TimeUnit.MILLISECONDS.sleep(300)
                } catch (e: InterruptedException) {
                    e.printStackTrace()
                }
            },
            {
                Log.d("üçï‚ùå", "onError: $it")
            },
            {
                Log.d("üçïüèÅ", "onComplete")
            }
        )
}

// –†–µ—à–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ backpressure
fun runBackpressureSafeInterval() {
    Flowable.interval(100, TimeUnit.MILLISECONDS)
        .take(30)
        .doOnNext { Log.d("üçï‚è≠", "Next Posted to Buffer: $it") }
        .onBackpressureBuffer(10, { Log.d("üçï‚ùå", "Ooops Overflow. Will drop oldest") }, BackpressureOverflowStrategy.DROP_OLDEST)
        .doOnNext { Log.d("üçï‚è≠", "Next Posted from Buffer: $it") }
        .subscribeOn(Schedulers.computation())
        .observeOn(Schedulers.io(), false, 3)
        .subscribe(
            {
                Log.d("üçï‚è≠", "onNext: $it")
                try {
                    TimeUnit.MILLISECONDS.sleep(300)
                } catch (e: InterruptedException) {
                    e.printStackTrace()
                }
            },
            {
                Log.d("üçï‚ùå", "onError: $it")
            },
            {
                Log.d("üçïüèÅ", "onComplete")
            }
        )
}

